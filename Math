1. count no of digits
void c(int n){
    if(n<0){
    n=abs(n); }
    int res=1;
    while(n>9){
        n=n/10;
        res++;
    }
    cout<<res;
} Time Complexity: O(log10N + 1)
int cnt = (int)(log10(n)+1); Time Complexity: O(1) 
2. Reverse a number

  int reverseNumber(int n) {
     string s=to_string(n);
     reverse(s.begin(), s.end());
     int a= stoi(s);
     return a;
    } Time Complexity: O(logn)

  void reverseNumber(int n) {
     int ans=0;
     int cnt= c(n)-1;
     while(n>9 && cnt>0){
        int r=0;
        r=n%10;n=n/10;
        ans+= pow(10,cnt)*r;
        cnt--;
     }
     ans+=n;
     cout<<ans;
    } Time Complexity:  O(log N * log(log N)).
Fastest
  void reverseNumber(int n) {
     int ans=0;
     while(n>0){
         int r=n%10; n=n/10;
         ans=ans*10+r;
     }
     cout<<ans;
    } Time Complexity: O(log10N + 1)

3. Check if integer is palindrome 
  bool p(int n) {
     string s=to_string(n);
     reverse(s.begin(),s.end());
     int c=stoi(s);
     return c==n;
    } Time Complexity: O(logn)

  bool p(int n) {
   int c=0; int f=n;
   while(n>0){
       int r=n%10;
       n=n/10;
       c= (10*c)+r;
   }
     return c==f;
    } Time Complexity: O(log10N + 1)

4. GCD
int gcd(int n, int m) {
    int ans;
    if(m>n) {int temp=n; n=m; m=temp; }

    for(int i=m;i>0;i--){
        if(m%i==0){
            if(n%i==0){
                return i;
            }
        }
    }
}  Time complexity : O(min(n, m))


