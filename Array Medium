1. Next permutation O(n)
void lead(int arr[], int n){
   vector<int> ans;ans.push_back(arr[n-1]);
    
    int l=arr[n-1];
    for(int i=n-2;i>0;i--){
        if(arr[i]>l){
            ans.push_back(arr[i]);
            l=arr[i];
        }
    }
    
    for(int i=ans.size()-1;i>=0;i--){
        cout<<ans[i]<<" ";
    }
}
2.Leaders in array O(n)
void lead(int arr[], int n){
   vector<int> ans;ans.push_back(arr[n-1]);
    
    int l=arr[n-1];
    for(int i=n-2;i>0;i--){
        if(arr[i]>l){
            ans.push_back(arr[i]);
            l=arr[i];
        }
    }
    
    for(int i=ans.size()-1;i>=0;i--){
        cout<<ans[i]<<" ";
    }
}
3. Longest Consecutive Sequence     
int longestConsecutive(vector<int>& nums) {
        if(nums.size()==0) return 0;
        sort(nums.begin(),nums.end());
        int ans=1; int maxx=1;
        for(int i=0;i<nums.size()-1;i++){
            if(nums[i]+1==nums[i+1] ){
                ans++;
                maxx=max(ans, maxx);
            }
            else if(nums[i]==nums[i+1]) continue;
            else{ans=1;}
            
        }
        return maxx;
    } O(nlogn)
int longestSuccessiveElements(vector<int>&a) {
    int n = a.size();
    if (n == 0) return 0;

    int longest = 1;
    unordered_set<int> st;
    //put all the array elements into set:
    for (int i = 0; i < n; i++) {
        st.insert(a[i]);
    }

    //Find the longest sequence:
    for (auto it : st) {
        //if 'it' is a starting number:
        if (st.find(it - 1) == st.end()) {
            //find consecutive numbers:
            int cnt = 1;
            int x = it;
            while (st.find(x + 1) != st.end()) {
                x = x + 1;
                cnt = cnt + 1;
            }
            longest = max(longest, cnt);
        }
    }
    return longest;

} O(2*N)
